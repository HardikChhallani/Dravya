"""
UI module for the Alternatives tab.
"""
import streamlit as st
import pandas as pd
import re
import io
from src.services.groq_services import groq_service

def extract_table_from_markdown(text):
    """
    Extract table data from markdown text.
    
    Args:
        text (str): Markdown text containing table
        
    Returns:
        DataFrame or None: Pandas DataFrame if table found, None otherwise
    """
    # Find markdown tables in the text
    table_pattern = r'\|(.+)\|[\r\n]+\|([-:]+\|)+([\r\n]+\|(.+)\|)+'
    table_match = re.search(table_pattern, text)
    
    if table_match:
        table_text = table_match.group(0)
        lines = table_text.strip().split('\n')
        
        # Extract headers
        headers = [h.strip() for h in lines[0].strip('|').split('|')]
        
        # Skip the separator line
        data_rows = lines[2:]  # Skip header and separator
        
        # Extract data
        data = []
        for row in data_rows:
            values = [cell.strip() for cell in row.strip('|').split('|')]
            data.append(values)
            
        return pd.DataFrame(data, columns=headers)
    
    return None

def format_alternatives_response(response_text):
    """
    Format the alternatives response for better UI display.
    
    Args:
        response_text (str): Raw response text from LLM
        
    Returns:
        tuple: (DataFrame or None, str)
    """
    # Try to extract table data
    df = extract_table_from_markdown(response_text)
    
    # Clean response text for display
    clean_text = response_text
    
    return df, clean_text

def create_download_content(medication_name, df, explanation_text):
    """
    Create formatted text content for download.
    
    Args:
        medication_name (str): Name of the medication
        df (DataFrame): Alternatives data
        explanation_text (str): Additional explanation text
        
    Returns:
        str: Formatted text for download
    """
    buffer = io.StringIO()
    
    # Add title
    buffer.write(f"ALTERNATIVE MEDICATIONS FOR {medication_name.upper()}\n")
    buffer.write("="*50 + "\n\n")
    
    # Add table data if available
    if df is not None:
        # Calculate column widths
        col_widths = [max(len(str(x)) for x in df[col].tolist() + [col]) for col in df.columns]
        
        # Write headers
        header_row = "  ".join(col.ljust(width) for col, width in zip(df.columns, col_widths))
        buffer.write(header_row + "\n")
        buffer.write("-" * len(header_row) + "\n")
        
        # Write data rows
        for _, row in df.iterrows():
            row_str = "  ".join(str(val).ljust(width) for val, width in zip(row, col_widths))
            buffer.write(row_str + "\n")
        
        buffer.write("\n\n")
    
    # Add explanation text
    if explanation_text:
        buffer.write("ADDITIONAL INFORMATION\n")
        buffer.write("-" * 20 + "\n")
        buffer.write(explanation_text.strip() + "\n\n")
    
    # Add footer
    buffer.write("\nGenerated by MedAlternatives Tool\n")
    
    return buffer.getvalue()

def show_alternatives_tab():
    """Display the alternatives tab UI and handle interactions."""
    st.header("Find Alternative Medications")
    
    st.markdown("""
    Need to find alternative options for your medication? Enter a medication name 
    below and we'll suggest therapeutic alternatives, including generic options 
    and similar medications.
    """)
    
    # User input
    med_name = st.text_input("Enter medication name:", key="alt_med_name")
    dosage = st.text_input("Dosage (optional):", key="alt_dosage")
    
    # Additional options
    col1, col2 = st.columns(2)
    with col1:
        include_generics = st.checkbox("Include generic alternatives", value=True)
    with col2:
        include_different_class = st.checkbox("Include alternatives from different classes", value=True)
    
    # Submit button
    if st.button("Find Alternatives", key="alt_submit"):
        if med_name:
            with st.spinner("Searching for alternatives..."):
                # Construct the query based on user input
                query = f"Find alternatives for {med_name}"
                if dosage:
                    query += f" {dosage}"
                query += "."
                
                if include_generics:
                    query += " Include generic alternatives."
                if include_different_class:
                    query += " Include alternatives from different medication classes if appropriate."
                
                # Get response from Groq
                response = groq_service.generate_response(query, "alternatives")
                response_text = response["content"]
                
                # Format the response
                df, clean_text = format_alternatives_response(response_text)
                
                # Display the response
                st.subheader("Alternative Medications")
                
                # Extract explanation text (text outside of table)
                table_pattern = r'\|(.+)\|[\r\n]+\|([-:]+\|)+([\r\n]+\|(.+)\|)+'
                explanation_text = re.sub(table_pattern, '', response_text).strip()
                
                if df is not None:
                    st.dataframe(df, use_container_width=True)
                    
                    # Display explanation below the table
                    if explanation_text:
                        st.markdown("### Additional Information")
                        st.markdown(explanation_text)
                    
                    # Create download button
                    download_content = create_download_content(med_name, df, explanation_text)
                    
                    # Add a download button
                    st.download_button(
                        label="Download results as TXT",
                        data=download_content,
                        file_name=f"{med_name.lower().replace(' ', '_')}_alternatives.txt",
                        mime="text/plain",
                        key="download_alternatives"
                    )
                else:
                    st.markdown(clean_text)
                    
                    # Even without table, we can still offer download
                    download_content = create_download_content(med_name, None, clean_text)
                    st.download_button(
                        label="Download results as TXT",
                        data=download_content,
                        file_name=f"{med_name.lower().replace(' ', '_')}_alternatives.txt",
                        mime="text/plain",
                        key="download_alternatives_text"
                    )
        else:
            st.warning("Please enter a medication name.")